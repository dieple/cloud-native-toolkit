#################################################################
# CloudOps IaC Local Development Environment
#
# Please do not modify the Dockerfile manually as it generate
# by setup.py. All modifications should be done in
# templates/Dockerfile.template
#################################################################
#ARG profile
#ARG terraformVersion=0.12.31
ARG terraformVersion
ARG flyCLIVersion
ARG sshKeyPassphrase
ARG baseImageVersion
ARG cloudflareApiToken

FROM dieple/cloud-native-toolkit:${baseImageVersion}

# Warning: It is not recommended to use build-time variables for passing secrets like github
# keys, user credentials etc.
# Build-time variable values are visible to any user of the image with the docker
# history command.
# Since I'm using this for my personal local development env so should be OK.
ARG sshKey
ARG sshKeyPub

#ENV TERM=xterm-256color
ENV TERM xterm

ENV TERRAFORM_VERSION=${terraformVersion}
ENV CLOUDFLARE_API_TOKEN=${cloudflareApiToken}

# Set this environment variable to true to set timezone on container start.
ENV SET_CONTAINER_TIMEZONE false

# Default container timezone as found under the directory /usr/share/zoneinfo/.
ENV CONTAINER_TIMEZONE Europe/London

RUN apt-get -y install fonts-powerline
RUN echo "root:toolkit" |chpasswd && \
    useradd -ms /bin/zsh -G sudo toolkit && \
    echo "toolkit:toolkit" |chpasswd


# Not too sure why ${terraformVersion} is null !!!
#wget -q https://releases.hashicorp.com/terraform/${terraformVersion}/terraform_${terraformVersion}_linux_amd64.zip && \
###INSTALL1_TERRAFORM###RUN cd /tmp && \
#    wget -q https://releases.hashicorp.com/terraform/0.12.31/terraform_0.12.31_linux_amd64.zip && \
#    unzip terraform_0.12.31_linux_amd64.zip -d /usr/local/bin && \
#    rm -rf /tmp/* && \
#    rm -rf /var/cache/apk/* && \
#    rm -rf /var/tmp/*

RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && ./aws/install && rm awscliv2.zip

VOLUME ["/repos"]

#ADD api-server.py /scripts
RUN mkdir -p /scripts
COPY ./builder_tools/scripts/packages /scripts/packages
ADD pip_packages /scripts/packages/
ADD ./builder_tools/scripts/ntp.sh "/scripts"
RUN /scripts/ntp.sh && \
    chown -R "toolkit:toolkit" /scripts

WORKDIR /scripts/packages


RUN pip install setuptools && \
	pip install git+https://github.com/virtuald/pyhcl.git@0.3.12#egg=pyhcl && \
	pip install -r pip_packages && \
  pip uninstall ansible ansible-core -y && \
  pip install ansible==2.9.26 && \
  pip install configobj && \
	pip freeze && \
	pip install ./secrets && \
	pip install ./render-templates && \
	pip install ./pgbackup && \
    rm -rf $HOME/.cache && \
    mkdir -p "/home/toolkit/.ssh" &&  \
    chmod 0700 "/home/toolkit/.ssh" && \
    chown -R "toolkit:toolkit" "/home/toolkit/.ssh" && \
    mkdir /home/toolkit/bin

#RUN echo "$sshKey" > "/home/toolkit/.ssh/id_rsa" && chmod 0600 "/home/toolkit/.ssh/id_rsa"
#RUN echo "$sshKeyPub" > "/home/toolkit/.ssh/id_rsa.pub" && chmod 0644 "/home/toolkit/.ssh/id_rsa.pub"

# DataOps Snowflake Cloner tool.
#COPY ./builder_tools/bin/sfcloner-linux-amd64-1.0.0 /home/toolkit/bin
#COPY ./builder_tools/bin/sfcloner /home/toolkit/bin
# This is required when create aws system user (for external S3 and CI/CD purpose)
#COPY ./builder_tools/bin/dataops.gpg.pub.bin /scripts/dataops.gpg.pub.bin

ADD ./builder_tools/scripts/unassume /home/toolkit/bin
ADD ./builder_tools/scripts/kms_encrypt.py /home/toolkit/bin
ADD ./builder_tools/scripts/kms_decrypt.py /home/toolkit/bin

#RUN eval `ssh-agent -s` && \
#    printf "${SSH_KEY_PASSPHRASE}\n" | ssh-add /home/toolkit/.ssh/id_rsa


ADD ./builder_tools/templates/vimrc "/home/toolkit/.vimrc"

RUN echo 'source <(kubectl completion zsh)' | tee -a "/home/toolkit/.zshrc" && \
    echo 'alias k=kubectl' | tee -a "/home/toolkit/.zshrc" && \
    echo 'alias kubectl=kubecolor' | tee -a "/home/toolkit/.zshrc" && \
    echo 'alias k9s="export TERM=xterm && k9s"' | tee -a "/home/toolkit/.zshrc"

# Set the vault profile in the environment for assume-role scripts.
#ENV VAULT_PROFILE=$profile

# Setup TERM and PS1
ENV TERM=xterm-color
#RUN echo '#override PS1' | tee -a "/home/toolkit/.bashrc"
#RUN echo '#override PS1' | tee -a "/home/toolkit/.zshrc"
#RUN echo "export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '" | tee -a "/home/toolkit/.zshrc"


# Add to PATH variable.
RUN echo "export PATH=$PATH:/scripts:/home/toolkit/bin" | tee -a "/home/toolkit/.zshrc" && \
    echo "export TF_PLUGIN_CACHE_DIR=/home/toolkit/.terraform.d/plugin-cache" | tee -a "/home/toolkit/.zshrc" && \
    echo 'ZSH_THEME="agnoster"' | tee -a "/home/toolkit/.zshrc" && \
    echo "export CLOUDFLARE_API_TOKEN=$cloudflareApiToken" | tee -a "/home/toolkit/.zshrc" && \
    echo "export PATH=$PATH:/home/toolkit/bin" | tee -a "/home/toolkit/.zshrc" && \
    echo "export TF_PLUGIN_CACHE_DIR=/home/toolkit/.terraform.d/plugin-cache" | tee -a "/home/toolkit/.zshrc" && \
    echo "export LC_TYPE=en_GB.UTF-8" | tee -a "/home/toolkit/.zshrc"

#EXPOSE 5000
#ENV GOROOT /usr/local/bin/go
#ENV GOPATH /repos/golang/golib
#ENV PATH $GOPATH/bin:$PATH:$GOROOT/bin
#ENV GOPATH $GOPATH:/repos/golang/go
WORKDIR /repos

ADD entry.sh /scripts/

RUN chown -R "toolkit:toolkit" /home/toolkit
#RUN chown -R "toolkit:toolkit" /home/toolkit/.terraform.d


# set the zsh theme
ENV ZSH_THEME agnoster
RUN wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O - | zsh || true
USER toolkit
# installing “agnoster” Oh My ZSH theme
#RUN wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O - | zsh || true
#RUN git clone https://github.com/powerline/fonts.git /tmp/.fonts && cd /tmp/.fonts && ./install.sh

# install tfenv
RUN git clone https://github.com/tfutils/tfenv.git ~/.tfenv && \
    echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> /home/toolkit/.zshrc

#RUN /home/toolkit/.tfenv/bin/tfenv install 0.12.31 && /home/toolkit/.tfenv/bin/tfenv install 1.0.9
# see https://opensource.com/article/20/11/tfenv for usage


WORKDIR /repos

#CMD  python /scripts/api-server.py /repos
ENTRYPOINT ["/scripts/entry.sh"]
